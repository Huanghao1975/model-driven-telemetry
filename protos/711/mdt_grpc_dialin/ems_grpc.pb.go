// Code generated by protoc-gen-go.
// source: ems_grpc.proto
// DO NOT EDIT!

/*
Package IOSXRExtensibleManagabilityService is a generated protocol buffer package.

It is generated from these files:
	ems_grpc.proto

It has these top-level messages:
	ConfigGetArgs
	ConfigGetReply
	GetOperArgs
	GetOperReply
	ConfigArgs
	ConfigReply
	CliConfigArgs
	CliConfigReply
	CommitReplaceArgs
	CommitReplaceReply
	CommitMsg
	CommitArgs
	CommitReply
	DiscardChangesArgs
	DiscardChangesReply
	ShowCmdArgs
	ShowCmdTextReply
	ShowCmdJSONReply
	QOSMarking
	CreateSubsArgs
	ActionJSONArgs
	ActionJSONReply
	CreateSubsReply
	SubscribeRequest
	TelemetryStreamDestination
	TelemetryPath
	SubscriptionList
	StatusResponse
	Notification
	SubscribeResponse
	CancelSubscribeReq
	GetModelsInput
	GetModelsOutput
	GetProtoFileArgs
	GetProtoFileReply
*/
package IOSXRExtensibleManagabilityService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommitResult int32

const (
	CommitResult_CHANGE    CommitResult = 0
	CommitResult_NO_CHANGE CommitResult = 1
	CommitResult_FAIL      CommitResult = 2
)

var CommitResult_name = map[int32]string{
	0: "CHANGE",
	1: "NO_CHANGE",
	2: "FAIL",
}
var CommitResult_value = map[string]int32{
	"CHANGE":    0,
	"NO_CHANGE": 1,
	"FAIL":      2,
}

func (x CommitResult) String() string {
	return proto.EnumName(CommitResult_name, int32(x))
}
func (CommitResult) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type OC_RPC_RESPONSE_TYPE int32

const (
	OC_RPC_RESPONSE_TYPE_OK                      OC_RPC_RESPONSE_TYPE = 0
	OC_RPC_RESPONSE_TYPE_NOK                     OC_RPC_RESPONSE_TYPE = 1
	OC_RPC_RESPONSE_TYPE_UNSUPPORTED_PATH        OC_RPC_RESPONSE_TYPE = 2
	OC_RPC_RESPONSE_TYPE_INVALID_PATH            OC_RPC_RESPONSE_TYPE = 3
	OC_RPC_RESPONSE_TYPE_INVALID_CONFIGURATION   OC_RPC_RESPONSE_TYPE = 4
	OC_RPC_RESPONSE_TYPE_UNSUPPORTED_INTERVAL    OC_RPC_RESPONSE_TYPE = 5
	OC_RPC_RESPONSE_TYPE_UNSUPPORTED_ENCODING    OC_RPC_RESPONSE_TYPE = 6
	OC_RPC_RESPONSE_TYPE_INVALID_SUBSCRIPTION_ID OC_RPC_RESPONSE_TYPE = 7
)

var OC_RPC_RESPONSE_TYPE_name = map[int32]string{
	0: "OK",
	1: "NOK",
	2: "UNSUPPORTED_PATH",
	3: "INVALID_PATH",
	4: "INVALID_CONFIGURATION",
	5: "UNSUPPORTED_INTERVAL",
	6: "UNSUPPORTED_ENCODING",
	7: "INVALID_SUBSCRIPTION_ID",
}
var OC_RPC_RESPONSE_TYPE_value = map[string]int32{
	"OK":                      0,
	"NOK":                     1,
	"UNSUPPORTED_PATH":        2,
	"INVALID_PATH":            3,
	"INVALID_CONFIGURATION":   4,
	"UNSUPPORTED_INTERVAL":    5,
	"UNSUPPORTED_ENCODING":    6,
	"INVALID_SUBSCRIPTION_ID": 7,
}

func (x OC_RPC_RESPONSE_TYPE) String() string {
	return proto.EnumName(OC_RPC_RESPONSE_TYPE_name, int32(x))
}
func (OC_RPC_RESPONSE_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GET_MODEL_TYPE int32

const (
	GET_MODEL_TYPE_MODULE       GET_MODEL_TYPE = 0
	GET_MODEL_TYPE_AUGMENTATION GET_MODEL_TYPE = 1
	GET_MODEL_TYPE_DEVIATION    GET_MODEL_TYPE = 2
	GET_MODEL_TYPE_BUNDLE       GET_MODEL_TYPE = 3
)

var GET_MODEL_TYPE_name = map[int32]string{
	0: "MODULE",
	1: "AUGMENTATION",
	2: "DEVIATION",
	3: "BUNDLE",
}
var GET_MODEL_TYPE_value = map[string]int32{
	"MODULE":       0,
	"AUGMENTATION": 1,
	"DEVIATION":    2,
	"BUNDLE":       3,
}

func (x GET_MODEL_TYPE) String() string {
	return proto.EnumName(GET_MODEL_TYPE_name, int32(x))
}
func (GET_MODEL_TYPE) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type TelemetryStreamDestination_TSP int32

const (
	TelemetryStreamDestination_TSP_TCP  TelemetryStreamDestination_TSP = 0
	TelemetryStreamDestination_TSP_GRPC TelemetryStreamDestination_TSP = 1
)

var TelemetryStreamDestination_TSP_name = map[int32]string{
	0: "TSP_TCP",
	1: "TSP_GRPC",
}
var TelemetryStreamDestination_TSP_value = map[string]int32{
	"TSP_TCP":  0,
	"TSP_GRPC": 1,
}

func (x TelemetryStreamDestination_TSP) String() string {
	return proto.EnumName(TelemetryStreamDestination_TSP_name, int32(x))
}
func (TelemetryStreamDestination_TSP) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{24, 0}
}

type SubscriptionList_ENC_SPEC int32

const (
	SubscriptionList_ENC_KV_GPB SubscriptionList_ENC_SPEC = 0
	SubscriptionList_ENC_GPB    SubscriptionList_ENC_SPEC = 1
)

var SubscriptionList_ENC_SPEC_name = map[int32]string{
	0: "ENC_KV_GPB",
	1: "ENC_GPB",
}
var SubscriptionList_ENC_SPEC_value = map[string]int32{
	"ENC_KV_GPB": 0,
	"ENC_GPB":    1,
}

func (x SubscriptionList_ENC_SPEC) String() string {
	return proto.EnumName(SubscriptionList_ENC_SPEC_name, int32(x))
}
func (SubscriptionList_ENC_SPEC) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26, 0}
}

type GetModelsInput_MODLE_REQUEST_TYPE int32

const (
	GetModelsInput_SUMMARY GetModelsInput_MODLE_REQUEST_TYPE = 0
	GetModelsInput_DETAIL  GetModelsInput_MODLE_REQUEST_TYPE = 1
)

var GetModelsInput_MODLE_REQUEST_TYPE_name = map[int32]string{
	0: "SUMMARY",
	1: "DETAIL",
}
var GetModelsInput_MODLE_REQUEST_TYPE_value = map[string]int32{
	"SUMMARY": 0,
	"DETAIL":  1,
}

func (x GetModelsInput_MODLE_REQUEST_TYPE) String() string {
	return proto.EnumName(GetModelsInput_MODLE_REQUEST_TYPE_name, int32(x))
}
func (GetModelsInput_MODLE_REQUEST_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{31, 0}
}

type ConfigGetArgs struct {
	ReqId        int64  `protobuf:"varint,1,opt,name=ReqId" json:"ReqId,omitempty"`
	Yangpathjson string `protobuf:"bytes,2,opt,name=yangpathjson" json:"yangpathjson,omitempty"`
}

func (m *ConfigGetArgs) Reset()                    { *m = ConfigGetArgs{} }
func (m *ConfigGetArgs) String() string            { return proto.CompactTextString(m) }
func (*ConfigGetArgs) ProtoMessage()               {}
func (*ConfigGetArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConfigGetArgs) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *ConfigGetArgs) GetYangpathjson() string {
	if m != nil {
		return m.Yangpathjson
	}
	return ""
}

type ConfigGetReply struct {
	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId" json:"ResReqId,omitempty"`
	Yangjson string `protobuf:"bytes,2,opt,name=yangjson" json:"yangjson,omitempty"`
	Errors   string `protobuf:"bytes,3,opt,name=errors" json:"errors,omitempty"`
}

func (m *ConfigGetReply) Reset()                    { *m = ConfigGetReply{} }
func (m *ConfigGetReply) String() string            { return proto.CompactTextString(m) }
func (*ConfigGetReply) ProtoMessage()               {}
func (*ConfigGetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ConfigGetReply) GetResReqId() int64 {
	if m != nil {
		return m.ResReqId
	}
	return 0
}

func (m *ConfigGetReply) GetYangjson() string {
	if m != nil {
		return m.Yangjson
	}
	return ""
}

func (m *ConfigGetReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type GetOperArgs struct {
	ReqId        int64  `protobuf:"varint,1,opt,name=ReqId" json:"ReqId,omitempty"`
	Yangpathjson string `protobuf:"bytes,2,opt,name=yangpathjson" json:"yangpathjson,omitempty"`
}

func (m *GetOperArgs) Reset()                    { *m = GetOperArgs{} }
func (m *GetOperArgs) String() string            { return proto.CompactTextString(m) }
func (*GetOperArgs) ProtoMessage()               {}
func (*GetOperArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetOperArgs) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *GetOperArgs) GetYangpathjson() string {
	if m != nil {
		return m.Yangpathjson
	}
	return ""
}

type GetOperReply struct {
	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId" json:"ResReqId,omitempty"`
	Yangjson string `protobuf:"bytes,2,opt,name=yangjson" json:"yangjson,omitempty"`
	Errors   string `protobuf:"bytes,3,opt,name=errors" json:"errors,omitempty"`
}

func (m *GetOperReply) Reset()                    { *m = GetOperReply{} }
func (m *GetOperReply) String() string            { return proto.CompactTextString(m) }
func (*GetOperReply) ProtoMessage()               {}
func (*GetOperReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetOperReply) GetResReqId() int64 {
	if m != nil {
		return m.ResReqId
	}
	return 0
}

func (m *GetOperReply) GetYangjson() string {
	if m != nil {
		return m.Yangjson
	}
	return ""
}

func (m *GetOperReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type ConfigArgs struct {
	ReqId          int64  `protobuf:"varint,1,opt,name=ReqId" json:"ReqId,omitempty"`
	Yangjson       string `protobuf:"bytes,2,opt,name=yangjson" json:"yangjson,omitempty"`
	Confirmed      bool   `protobuf:"varint,3,opt,name=Confirmed" json:"Confirmed,omitempty"`
	ConfirmTimeout uint32 `protobuf:"varint,4,opt,name=ConfirmTimeout" json:"ConfirmTimeout,omitempty"`
}

func (m *ConfigArgs) Reset()                    { *m = ConfigArgs{} }
func (m *ConfigArgs) String() string            { return proto.CompactTextString(m) }
func (*ConfigArgs) ProtoMessage()               {}
func (*ConfigArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ConfigArgs) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *ConfigArgs) GetYangjson() string {
	if m != nil {
		return m.Yangjson
	}
	return ""
}

func (m *ConfigArgs) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

func (m *ConfigArgs) GetConfirmTimeout() uint32 {
	if m != nil {
		return m.ConfirmTimeout
	}
	return 0
}

type ConfigReply struct {
	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId" json:"ResReqId,omitempty"`
	Errors   string `protobuf:"bytes,2,opt,name=errors" json:"errors,omitempty"`
	CommitID uint32 `protobuf:"varint,3,opt,name=CommitID" json:"CommitID,omitempty"`
}

func (m *ConfigReply) Reset()                    { *m = ConfigReply{} }
func (m *ConfigReply) String() string            { return proto.CompactTextString(m) }
func (*ConfigReply) ProtoMessage()               {}
func (*ConfigReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ConfigReply) GetResReqId() int64 {
	if m != nil {
		return m.ResReqId
	}
	return 0
}

func (m *ConfigReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

func (m *ConfigReply) GetCommitID() uint32 {
	if m != nil {
		return m.CommitID
	}
	return 0
}

type CliConfigArgs struct {
	ReqId          int64  `protobuf:"varint,1,opt,name=ReqId" json:"ReqId,omitempty"`
	Cli            string `protobuf:"bytes,2,opt,name=cli" json:"cli,omitempty"`
	Confirmed      bool   `protobuf:"varint,3,opt,name=Confirmed" json:"Confirmed,omitempty"`
	ConfirmTimeout uint32 `protobuf:"varint,4,opt,name=ConfirmTimeout" json:"ConfirmTimeout,omitempty"`
}

func (m *CliConfigArgs) Reset()                    { *m = CliConfigArgs{} }
func (m *CliConfigArgs) String() string            { return proto.CompactTextString(m) }
func (*CliConfigArgs) ProtoMessage()               {}
func (*CliConfigArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CliConfigArgs) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *CliConfigArgs) GetCli() string {
	if m != nil {
		return m.Cli
	}
	return ""
}

func (m *CliConfigArgs) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

func (m *CliConfigArgs) GetConfirmTimeout() uint32 {
	if m != nil {
		return m.ConfirmTimeout
	}
	return 0
}

type CliConfigReply struct {
	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId" json:"ResReqId,omitempty"`
	Errors   string `protobuf:"bytes,2,opt,name=errors" json:"errors,omitempty"`
	CommitID uint32 `protobuf:"varint,3,opt,name=CommitID" json:"CommitID,omitempty"`
}

func (m *CliConfigReply) Reset()                    { *m = CliConfigReply{} }
func (m *CliConfigReply) String() string            { return proto.CompactTextString(m) }
func (*CliConfigReply) ProtoMessage()               {}
func (*CliConfigReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CliConfigReply) GetResReqId() int64 {
	if m != nil {
		return m.ResReqId
	}
	return 0
}

func (m *CliConfigReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

func (m *CliConfigReply) GetCommitID() uint32 {
	if m != nil {
		return m.CommitID
	}
	return 0
}

type CommitReplaceArgs struct {
	ReqId    int64  `protobuf:"varint,1,opt,name=ReqId" json:"ReqId,omitempty"`
	Cli      string `protobuf:"bytes,2,opt,name=cli" json:"cli,omitempty"`
	Yangjson string `protobuf:"bytes,3,opt,name=yangjson" json:"yangjson,omitempty"`
}

func (m *CommitReplaceArgs) Reset()                    { *m = CommitReplaceArgs{} }
func (m *CommitReplaceArgs) String() string            { return proto.CompactTextString(m) }
func (*CommitReplaceArgs) ProtoMessage()               {}
func (*CommitReplaceArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CommitReplaceArgs) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *CommitReplaceArgs) GetCli() string {
	if m != nil {
		return m.Cli
	}
	return ""
}

func (m *CommitReplaceArgs) GetYangjson() string {
	if m != nil {
		return m.Yangjson
	}
	return ""
}

type CommitReplaceReply struct {
	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId" json:"ResReqId,omitempty"`
	Errors   string `protobuf:"bytes,2,opt,name=errors" json:"errors,omitempty"`
}

func (m *CommitReplaceReply) Reset()                    { *m = CommitReplaceReply{} }
func (m *CommitReplaceReply) String() string            { return proto.CompactTextString(m) }
func (*CommitReplaceReply) ProtoMessage()               {}
func (*CommitReplaceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CommitReplaceReply) GetResReqId() int64 {
	if m != nil {
		return m.ResReqId
	}
	return 0
}

func (m *CommitReplaceReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type CommitMsg struct {
	Label   string `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Comment string `protobuf:"bytes,2,opt,name=comment" json:"comment,omitempty"`
}

func (m *CommitMsg) Reset()                    { *m = CommitMsg{} }
func (m *CommitMsg) String() string            { return proto.CompactTextString(m) }
func (*CommitMsg) ProtoMessage()               {}
func (*CommitMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CommitMsg) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *CommitMsg) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type CommitArgs struct {
	ReqId    int64  `protobuf:"varint,1,opt,name=ReqId" json:"ReqId,omitempty"`
	CommitID uint32 `protobuf:"varint,2,opt,name=CommitID" json:"CommitID,omitempty"`
}

func (m *CommitArgs) Reset()                    { *m = CommitArgs{} }
func (m *CommitArgs) String() string            { return proto.CompactTextString(m) }
func (*CommitArgs) ProtoMessage()               {}
func (*CommitArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CommitArgs) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *CommitArgs) GetCommitID() uint32 {
	if m != nil {
		return m.CommitID
	}
	return 0
}

type CommitReply struct {
	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId" json:"ResReqId,omitempty"`
	Errors   string `protobuf:"bytes,2,opt,name=errors" json:"errors,omitempty"`
}

func (m *CommitReply) Reset()                    { *m = CommitReply{} }
func (m *CommitReply) String() string            { return proto.CompactTextString(m) }
func (*CommitReply) ProtoMessage()               {}
func (*CommitReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CommitReply) GetResReqId() int64 {
	if m != nil {
		return m.ResReqId
	}
	return 0
}

func (m *CommitReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type DiscardChangesArgs struct {
	ReqId int64 `protobuf:"varint,1,opt,name=ReqId" json:"ReqId,omitempty"`
}

func (m *DiscardChangesArgs) Reset()                    { *m = DiscardChangesArgs{} }
func (m *DiscardChangesArgs) String() string            { return proto.CompactTextString(m) }
func (*DiscardChangesArgs) ProtoMessage()               {}
func (*DiscardChangesArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DiscardChangesArgs) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

type DiscardChangesReply struct {
	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId" json:"ResReqId,omitempty"`
	Errors   string `protobuf:"bytes,2,opt,name=errors" json:"errors,omitempty"`
}

func (m *DiscardChangesReply) Reset()                    { *m = DiscardChangesReply{} }
func (m *DiscardChangesReply) String() string            { return proto.CompactTextString(m) }
func (*DiscardChangesReply) ProtoMessage()               {}
func (*DiscardChangesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DiscardChangesReply) GetResReqId() int64 {
	if m != nil {
		return m.ResReqId
	}
	return 0
}

func (m *DiscardChangesReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type ShowCmdArgs struct {
	ReqId int64  `protobuf:"varint,1,opt,name=ReqId" json:"ReqId,omitempty"`
	Cli   string `protobuf:"bytes,2,opt,name=cli" json:"cli,omitempty"`
}

func (m *ShowCmdArgs) Reset()                    { *m = ShowCmdArgs{} }
func (m *ShowCmdArgs) String() string            { return proto.CompactTextString(m) }
func (*ShowCmdArgs) ProtoMessage()               {}
func (*ShowCmdArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ShowCmdArgs) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *ShowCmdArgs) GetCli() string {
	if m != nil {
		return m.Cli
	}
	return ""
}

type ShowCmdTextReply struct {
	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId" json:"ResReqId,omitempty"`
	Output   string `protobuf:"bytes,2,opt,name=output" json:"output,omitempty"`
	Errors   string `protobuf:"bytes,3,opt,name=errors" json:"errors,omitempty"`
}

func (m *ShowCmdTextReply) Reset()                    { *m = ShowCmdTextReply{} }
func (m *ShowCmdTextReply) String() string            { return proto.CompactTextString(m) }
func (*ShowCmdTextReply) ProtoMessage()               {}
func (*ShowCmdTextReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ShowCmdTextReply) GetResReqId() int64 {
	if m != nil {
		return m.ResReqId
	}
	return 0
}

func (m *ShowCmdTextReply) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func (m *ShowCmdTextReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type ShowCmdJSONReply struct {
	ResReqId   int64  `protobuf:"varint,1,opt,name=ResReqId" json:"ResReqId,omitempty"`
	Jsonoutput string `protobuf:"bytes,2,opt,name=jsonoutput" json:"jsonoutput,omitempty"`
	Errors     string `protobuf:"bytes,3,opt,name=errors" json:"errors,omitempty"`
}

func (m *ShowCmdJSONReply) Reset()                    { *m = ShowCmdJSONReply{} }
func (m *ShowCmdJSONReply) String() string            { return proto.CompactTextString(m) }
func (*ShowCmdJSONReply) ProtoMessage()               {}
func (*ShowCmdJSONReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ShowCmdJSONReply) GetResReqId() int64 {
	if m != nil {
		return m.ResReqId
	}
	return 0
}

func (m *ShowCmdJSONReply) GetJsonoutput() string {
	if m != nil {
		return m.Jsonoutput
	}
	return ""
}

func (m *ShowCmdJSONReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

// QOSMarking specifies the DSCP value to be set on transmitted telemetry
type QOSMarking struct {
	Marking uint32 `protobuf:"varint,1,opt,name=marking" json:"marking,omitempty"`
}

func (m *QOSMarking) Reset()                    { *m = QOSMarking{} }
func (m *QOSMarking) String() string            { return proto.CompactTextString(m) }
func (*QOSMarking) ProtoMessage()               {}
func (*QOSMarking) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *QOSMarking) GetMarking() uint32 {
	if m != nil {
		return m.Marking
	}
	return 0
}

type CreateSubsArgs struct {
	ReqId         int64       `protobuf:"varint,1,opt,name=ReqId" json:"ReqId,omitempty"`
	Encode        int64       `protobuf:"varint,2,opt,name=encode" json:"encode,omitempty"`
	Subidstr      string      `protobuf:"bytes,3,opt,name=subidstr" json:"subidstr,omitempty"`
	Qos           *QOSMarking `protobuf:"bytes,4,opt,name=qos" json:"qos,omitempty"`
	Subscriptions []string    `protobuf:"bytes,5,rep,name=Subscriptions" json:"Subscriptions,omitempty"`
}

func (m *CreateSubsArgs) Reset()                    { *m = CreateSubsArgs{} }
func (m *CreateSubsArgs) String() string            { return proto.CompactTextString(m) }
func (*CreateSubsArgs) ProtoMessage()               {}
func (*CreateSubsArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CreateSubsArgs) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *CreateSubsArgs) GetEncode() int64 {
	if m != nil {
		return m.Encode
	}
	return 0
}

func (m *CreateSubsArgs) GetSubidstr() string {
	if m != nil {
		return m.Subidstr
	}
	return ""
}

func (m *CreateSubsArgs) GetQos() *QOSMarking {
	if m != nil {
		return m.Qos
	}
	return nil
}

func (m *CreateSubsArgs) GetSubscriptions() []string {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

type ActionJSONArgs struct {
	ReqId        int64  `protobuf:"varint,1,opt,name=ReqId" json:"ReqId,omitempty"`
	Yangpathjson string `protobuf:"bytes,2,opt,name=yangpathjson" json:"yangpathjson,omitempty"`
}

func (m *ActionJSONArgs) Reset()                    { *m = ActionJSONArgs{} }
func (m *ActionJSONArgs) String() string            { return proto.CompactTextString(m) }
func (*ActionJSONArgs) ProtoMessage()               {}
func (*ActionJSONArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ActionJSONArgs) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *ActionJSONArgs) GetYangpathjson() string {
	if m != nil {
		return m.Yangpathjson
	}
	return ""
}

type ActionJSONReply struct {
	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId" json:"ResReqId,omitempty"`
	Yangjson string `protobuf:"bytes,2,opt,name=yangjson" json:"yangjson,omitempty"`
	Errors   string `protobuf:"bytes,3,opt,name=errors" json:"errors,omitempty"`
}

func (m *ActionJSONReply) Reset()                    { *m = ActionJSONReply{} }
func (m *ActionJSONReply) String() string            { return proto.CompactTextString(m) }
func (*ActionJSONReply) ProtoMessage()               {}
func (*ActionJSONReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ActionJSONReply) GetResReqId() int64 {
	if m != nil {
		return m.ResReqId
	}
	return 0
}

func (m *ActionJSONReply) GetYangjson() string {
	if m != nil {
		return m.Yangjson
	}
	return ""
}

func (m *ActionJSONReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type CreateSubsReply struct {
	ResReqId int64  `protobuf:"varint,1,opt,name=ResReqId" json:"ResReqId,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Errors   string `protobuf:"bytes,3,opt,name=errors" json:"errors,omitempty"`
}

func (m *CreateSubsReply) Reset()                    { *m = CreateSubsReply{} }
func (m *CreateSubsReply) String() string            { return proto.CompactTextString(m) }
func (*CreateSubsReply) ProtoMessage()               {}
func (*CreateSubsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CreateSubsReply) GetResReqId() int64 {
	if m != nil {
		return m.ResReqId
	}
	return 0
}

func (m *CreateSubsReply) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateSubsReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

type SubscribeRequest struct {
	ReqId int64 `protobuf:"varint,1,opt,name=ReqId" json:"ReqId,omitempty"`
	// Types that are valid to be assigned to Request:
	//	*SubscribeRequest_Subscribe
	Request isSubscribeRequest_Request `protobuf_oneof:"request"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type isSubscribeRequest_Request interface {
	isSubscribeRequest_Request()
}

type SubscribeRequest_Subscribe struct {
	Subscribe *SubscriptionList `protobuf:"bytes,2,opt,name=subscribe,oneof"`
}

func (*SubscribeRequest_Subscribe) isSubscribeRequest_Request() {}

func (m *SubscribeRequest) GetRequest() isSubscribeRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *SubscribeRequest) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *SubscribeRequest) GetSubscribe() *SubscriptionList {
	if x, ok := m.GetRequest().(*SubscribeRequest_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SubscribeRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SubscribeRequest_OneofMarshaler, _SubscribeRequest_OneofUnmarshaler, _SubscribeRequest_OneofSizer, []interface{}{
		(*SubscribeRequest_Subscribe)(nil),
	}
}

func _SubscribeRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SubscribeRequest)
	// request
	switch x := m.Request.(type) {
	case *SubscribeRequest_Subscribe:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Subscribe); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SubscribeRequest.Request has unexpected type %T", x)
	}
	return nil
}

func _SubscribeRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SubscribeRequest)
	switch tag {
	case 2: // request.subscribe
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SubscriptionList)
		err := b.DecodeMessage(msg)
		m.Request = &SubscribeRequest_Subscribe{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SubscribeRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SubscribeRequest)
	// request
	switch x := m.Request.(type) {
	case *SubscribeRequest_Subscribe:
		s := proto.Size(x.Subscribe)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TelemetryStreamDestination struct {
	DestinationAddress      string                         `protobuf:"bytes,1,opt,name=destination_address,json=destinationAddress" json:"destination_address,omitempty"`
	DestinationPort         uint32                         `protobuf:"varint,2,opt,name=destination_port,json=destinationPort" json:"destination_port,omitempty"`
	TelemetryStreamProtocol TelemetryStreamDestination_TSP `protobuf:"varint,3,opt,name=telemetry_stream_protocol,json=telemetryStreamProtocol,enum=IOSXRExtensibleManagabilityService.TelemetryStreamDestination_TSP" json:"telemetry_stream_protocol,omitempty"`
}

func (m *TelemetryStreamDestination) Reset()                    { *m = TelemetryStreamDestination{} }
func (m *TelemetryStreamDestination) String() string            { return proto.CompactTextString(m) }
func (*TelemetryStreamDestination) ProtoMessage()               {}
func (*TelemetryStreamDestination) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *TelemetryStreamDestination) GetDestinationAddress() string {
	if m != nil {
		return m.DestinationAddress
	}
	return ""
}

func (m *TelemetryStreamDestination) GetDestinationPort() uint32 {
	if m != nil {
		return m.DestinationPort
	}
	return 0
}

func (m *TelemetryStreamDestination) GetTelemetryStreamProtocol() TelemetryStreamDestination_TSP {
	if m != nil {
		return m.TelemetryStreamProtocol
	}
	return TelemetryStreamDestination_TSP_TCP
}

type TelemetryPath struct {
	Path string `protobuf:"bytes,1,opt,name=Path" json:"Path,omitempty"`
}

func (m *TelemetryPath) Reset()                    { *m = TelemetryPath{} }
func (m *TelemetryPath) String() string            { return proto.CompactTextString(m) }
func (*TelemetryPath) ProtoMessage()               {}
func (*TelemetryPath) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *TelemetryPath) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type SubscriptionList struct {
	TelemetryStreamDestinations []*TelemetryStreamDestination `protobuf:"bytes,1,rep,name=TelemetryStreamDestinations" json:"TelemetryStreamDestinations,omitempty"`
	TelemetryPaths              []*TelemetryPath              `protobuf:"bytes,2,rep,name=TelemetryPaths" json:"TelemetryPaths,omitempty"`
	SampleInterval              uint64                        `protobuf:"varint,3,opt,name=sample_interval,json=sampleInterval" json:"sample_interval,omitempty"`
	Encoding                    SubscriptionList_ENC_SPEC     `protobuf:"varint,4,opt,name=encoding,enum=IOSXRExtensibleManagabilityService.SubscriptionList_ENC_SPEC" json:"encoding,omitempty"`
	Qos                         *QOSMarking                   `protobuf:"bytes,5,opt,name=qos" json:"qos,omitempty"`
}

func (m *SubscriptionList) Reset()                    { *m = SubscriptionList{} }
func (m *SubscriptionList) String() string            { return proto.CompactTextString(m) }
func (*SubscriptionList) ProtoMessage()               {}
func (*SubscriptionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *SubscriptionList) GetTelemetryStreamDestinations() []*TelemetryStreamDestination {
	if m != nil {
		return m.TelemetryStreamDestinations
	}
	return nil
}

func (m *SubscriptionList) GetTelemetryPaths() []*TelemetryPath {
	if m != nil {
		return m.TelemetryPaths
	}
	return nil
}

func (m *SubscriptionList) GetSampleInterval() uint64 {
	if m != nil {
		return m.SampleInterval
	}
	return 0
}

func (m *SubscriptionList) GetEncoding() SubscriptionList_ENC_SPEC {
	if m != nil {
		return m.Encoding
	}
	return SubscriptionList_ENC_KV_GPB
}

func (m *SubscriptionList) GetQos() *QOSMarking {
	if m != nil {
		return m.Qos
	}
	return nil
}

type StatusResponse struct {
	MessageJson string               `protobuf:"bytes,1,opt,name=message_json,json=messageJson" json:"message_json,omitempty"`
	Code        OC_RPC_RESPONSE_TYPE `protobuf:"varint,2,opt,name=code,enum=IOSXRExtensibleManagabilityService.OC_RPC_RESPONSE_TYPE" json:"code,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *StatusResponse) GetMessageJson() string {
	if m != nil {
		return m.MessageJson
	}
	return ""
}

func (m *StatusResponse) GetCode() OC_RPC_RESPONSE_TYPE {
	if m != nil {
		return m.Code
	}
	return OC_RPC_RESPONSE_TYPE_OK
}

type Notification struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *Notification) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SubscribeResponse struct {
	ResReqId       int64  `protobuf:"varint,1,opt,name=ResReqId" json:"ResReqId,omitempty"`
	SubscriptionId uint64 `protobuf:"varint,2,opt,name=subscription_id,json=subscriptionId" json:"subscription_id,omitempty"`
	// Types that are valid to be assigned to Response:
	//	*SubscribeResponse_Update
	//	*SubscribeResponse_Status
	Response isSubscribeResponse_Response `protobuf_oneof:"response"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

type isSubscribeResponse_Response interface {
	isSubscribeResponse_Response()
}

type SubscribeResponse_Update struct {
	Update *Notification `protobuf:"bytes,3,opt,name=update,oneof"`
}
type SubscribeResponse_Status struct {
	Status *StatusResponse `protobuf:"bytes,4,opt,name=status,oneof"`
}

func (*SubscribeResponse_Update) isSubscribeResponse_Response() {}
func (*SubscribeResponse_Status) isSubscribeResponse_Response() {}

func (m *SubscribeResponse) GetResponse() isSubscribeResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *SubscribeResponse) GetResReqId() int64 {
	if m != nil {
		return m.ResReqId
	}
	return 0
}

func (m *SubscribeResponse) GetSubscriptionId() uint64 {
	if m != nil {
		return m.SubscriptionId
	}
	return 0
}

func (m *SubscribeResponse) GetUpdate() *Notification {
	if x, ok := m.GetResponse().(*SubscribeResponse_Update); ok {
		return x.Update
	}
	return nil
}

func (m *SubscribeResponse) GetStatus() *StatusResponse {
	if x, ok := m.GetResponse().(*SubscribeResponse_Status); ok {
		return x.Status
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SubscribeResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SubscribeResponse_OneofMarshaler, _SubscribeResponse_OneofUnmarshaler, _SubscribeResponse_OneofSizer, []interface{}{
		(*SubscribeResponse_Update)(nil),
		(*SubscribeResponse_Status)(nil),
	}
}

func _SubscribeResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SubscribeResponse)
	// response
	switch x := m.Response.(type) {
	case *SubscribeResponse_Update:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Update); err != nil {
			return err
		}
	case *SubscribeResponse_Status:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Status); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SubscribeResponse.Response has unexpected type %T", x)
	}
	return nil
}

func _SubscribeResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SubscribeResponse)
	switch tag {
	case 3: // response.update
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Notification)
		err := b.DecodeMessage(msg)
		m.Response = &SubscribeResponse_Update{msg}
		return true, err
	case 4: // response.status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StatusResponse)
		err := b.DecodeMessage(msg)
		m.Response = &SubscribeResponse_Status{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SubscribeResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SubscribeResponse)
	// response
	switch x := m.Response.(type) {
	case *SubscribeResponse_Update:
		s := proto.Size(x.Update)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SubscribeResponse_Status:
		s := proto.Size(x.Status)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CancelSubscribeReq struct {
	ReqId          int64  `protobuf:"varint,1,opt,name=ReqId" json:"ReqId,omitempty"`
	SubscriptionId uint64 `protobuf:"varint,2,opt,name=subscription_id,json=subscriptionId" json:"subscription_id,omitempty"`
}

func (m *CancelSubscribeReq) Reset()                    { *m = CancelSubscribeReq{} }
func (m *CancelSubscribeReq) String() string            { return proto.CompactTextString(m) }
func (*CancelSubscribeReq) ProtoMessage()               {}
func (*CancelSubscribeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *CancelSubscribeReq) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *CancelSubscribeReq) GetSubscriptionId() uint64 {
	if m != nil {
		return m.SubscriptionId
	}
	return 0
}

type GetModelsInput struct {
	RequestId   uint64                            `protobuf:"varint,1,opt,name=requestId" json:"requestId,omitempty"`
	Name        string                            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Namespace   string                            `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
	Version     string                            `protobuf:"bytes,4,opt,name=version" json:"version,omitempty"`
	RequestType GetModelsInput_MODLE_REQUEST_TYPE `protobuf:"varint,5,opt,name=requestType,enum=IOSXRExtensibleManagabilityService.GetModelsInput_MODLE_REQUEST_TYPE" json:"requestType,omitempty"`
}

func (m *GetModelsInput) Reset()                    { *m = GetModelsInput{} }
func (m *GetModelsInput) String() string            { return proto.CompactTextString(m) }
func (*GetModelsInput) ProtoMessage()               {}
func (*GetModelsInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *GetModelsInput) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *GetModelsInput) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetModelsInput) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetModelsInput) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetModelsInput) GetRequestType() GetModelsInput_MODLE_REQUEST_TYPE {
	if m != nil {
		return m.RequestType
	}
	return GetModelsInput_SUMMARY
}

type GetModelsOutput struct {
	RequestId    uint64                       `protobuf:"varint,1,opt,name=requestId" json:"requestId,omitempty"`
	Models       []*GetModelsOutput_ModelInfo `protobuf:"bytes,2,rep,name=models" json:"models,omitempty"`
	ResponseCode OC_RPC_RESPONSE_TYPE         `protobuf:"varint,3,opt,name=responseCode,enum=IOSXRExtensibleManagabilityService.OC_RPC_RESPONSE_TYPE" json:"responseCode,omitempty"`
	Msg          string                       `protobuf:"bytes,4,opt,name=msg" json:"msg,omitempty"`
}

func (m *GetModelsOutput) Reset()                    { *m = GetModelsOutput{} }
func (m *GetModelsOutput) String() string            { return proto.CompactTextString(m) }
func (*GetModelsOutput) ProtoMessage()               {}
func (*GetModelsOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *GetModelsOutput) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *GetModelsOutput) GetModels() []*GetModelsOutput_ModelInfo {
	if m != nil {
		return m.Models
	}
	return nil
}

func (m *GetModelsOutput) GetResponseCode() OC_RPC_RESPONSE_TYPE {
	if m != nil {
		return m.ResponseCode
	}
	return OC_RPC_RESPONSE_TYPE_OK
}

func (m *GetModelsOutput) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type GetModelsOutput_ModelInfo struct {
	Name      string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Namespace string         `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Version   string         `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	ModelType GET_MODEL_TYPE `protobuf:"varint,4,opt,name=modelType,enum=IOSXRExtensibleManagabilityService.GET_MODEL_TYPE" json:"modelType,omitempty"`
	ModelData string         `protobuf:"bytes,5,opt,name=modelData" json:"modelData,omitempty"`
}

func (m *GetModelsOutput_ModelInfo) Reset()                    { *m = GetModelsOutput_ModelInfo{} }
func (m *GetModelsOutput_ModelInfo) String() string            { return proto.CompactTextString(m) }
func (*GetModelsOutput_ModelInfo) ProtoMessage()               {}
func (*GetModelsOutput_ModelInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32, 0} }

func (m *GetModelsOutput_ModelInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetModelsOutput_ModelInfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *GetModelsOutput_ModelInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetModelsOutput_ModelInfo) GetModelType() GET_MODEL_TYPE {
	if m != nil {
		return m.ModelType
	}
	return GET_MODEL_TYPE_MODULE
}

func (m *GetModelsOutput_ModelInfo) GetModelData() string {
	if m != nil {
		return m.ModelData
	}
	return ""
}

type GetProtoFileArgs struct {
	ReqId    int64  `protobuf:"varint,1,opt,name=reqId" json:"reqId,omitempty"`
	YangPath string `protobuf:"bytes,2,opt,name=yangPath" json:"yangPath,omitempty"`
}

func (m *GetProtoFileArgs) Reset()                    { *m = GetProtoFileArgs{} }
func (m *GetProtoFileArgs) String() string            { return proto.CompactTextString(m) }
func (*GetProtoFileArgs) ProtoMessage()               {}
func (*GetProtoFileArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *GetProtoFileArgs) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *GetProtoFileArgs) GetYangPath() string {
	if m != nil {
		return m.YangPath
	}
	return ""
}

type GetProtoFileReply struct {
	ReqId        int64  `protobuf:"varint,1,opt,name=reqId" json:"reqId,omitempty"`
	ProtoContent string `protobuf:"bytes,2,opt,name=protoContent" json:"protoContent,omitempty"`
	Errors       string `protobuf:"bytes,3,opt,name=errors" json:"errors,omitempty"`
}

func (m *GetProtoFileReply) Reset()                    { *m = GetProtoFileReply{} }
func (m *GetProtoFileReply) String() string            { return proto.CompactTextString(m) }
func (*GetProtoFileReply) ProtoMessage()               {}
func (*GetProtoFileReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *GetProtoFileReply) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *GetProtoFileReply) GetProtoContent() string {
	if m != nil {
		return m.ProtoContent
	}
	return ""
}

func (m *GetProtoFileReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

func init() {
	proto.RegisterType((*ConfigGetArgs)(nil), "IOSXRExtensibleManagabilityService.ConfigGetArgs")
	proto.RegisterType((*ConfigGetReply)(nil), "IOSXRExtensibleManagabilityService.ConfigGetReply")
	proto.RegisterType((*GetOperArgs)(nil), "IOSXRExtensibleManagabilityService.GetOperArgs")
	proto.RegisterType((*GetOperReply)(nil), "IOSXRExtensibleManagabilityService.GetOperReply")
	proto.RegisterType((*ConfigArgs)(nil), "IOSXRExtensibleManagabilityService.ConfigArgs")
	proto.RegisterType((*ConfigReply)(nil), "IOSXRExtensibleManagabilityService.ConfigReply")
	proto.RegisterType((*CliConfigArgs)(nil), "IOSXRExtensibleManagabilityService.CliConfigArgs")
	proto.RegisterType((*CliConfigReply)(nil), "IOSXRExtensibleManagabilityService.CliConfigReply")
	proto.RegisterType((*CommitReplaceArgs)(nil), "IOSXRExtensibleManagabilityService.CommitReplaceArgs")
	proto.RegisterType((*CommitReplaceReply)(nil), "IOSXRExtensibleManagabilityService.CommitReplaceReply")
	proto.RegisterType((*CommitMsg)(nil), "IOSXRExtensibleManagabilityService.CommitMsg")
	proto.RegisterType((*CommitArgs)(nil), "IOSXRExtensibleManagabilityService.CommitArgs")
	proto.RegisterType((*CommitReply)(nil), "IOSXRExtensibleManagabilityService.CommitReply")
	proto.RegisterType((*DiscardChangesArgs)(nil), "IOSXRExtensibleManagabilityService.DiscardChangesArgs")
	proto.RegisterType((*DiscardChangesReply)(nil), "IOSXRExtensibleManagabilityService.DiscardChangesReply")
	proto.RegisterType((*ShowCmdArgs)(nil), "IOSXRExtensibleManagabilityService.ShowCmdArgs")
	proto.RegisterType((*ShowCmdTextReply)(nil), "IOSXRExtensibleManagabilityService.ShowCmdTextReply")
	proto.RegisterType((*ShowCmdJSONReply)(nil), "IOSXRExtensibleManagabilityService.ShowCmdJSONReply")
	proto.RegisterType((*QOSMarking)(nil), "IOSXRExtensibleManagabilityService.QOSMarking")
	proto.RegisterType((*CreateSubsArgs)(nil), "IOSXRExtensibleManagabilityService.CreateSubsArgs")
	proto.RegisterType((*ActionJSONArgs)(nil), "IOSXRExtensibleManagabilityService.ActionJSONArgs")
	proto.RegisterType((*ActionJSONReply)(nil), "IOSXRExtensibleManagabilityService.ActionJSONReply")
	proto.RegisterType((*CreateSubsReply)(nil), "IOSXRExtensibleManagabilityService.CreateSubsReply")
	proto.RegisterType((*SubscribeRequest)(nil), "IOSXRExtensibleManagabilityService.SubscribeRequest")
	proto.RegisterType((*TelemetryStreamDestination)(nil), "IOSXRExtensibleManagabilityService.TelemetryStreamDestination")
	proto.RegisterType((*TelemetryPath)(nil), "IOSXRExtensibleManagabilityService.TelemetryPath")
	proto.RegisterType((*SubscriptionList)(nil), "IOSXRExtensibleManagabilityService.SubscriptionList")
	proto.RegisterType((*StatusResponse)(nil), "IOSXRExtensibleManagabilityService.StatusResponse")
	proto.RegisterType((*Notification)(nil), "IOSXRExtensibleManagabilityService.Notification")
	proto.RegisterType((*SubscribeResponse)(nil), "IOSXRExtensibleManagabilityService.SubscribeResponse")
	proto.RegisterType((*CancelSubscribeReq)(nil), "IOSXRExtensibleManagabilityService.CancelSubscribeReq")
	proto.RegisterType((*GetModelsInput)(nil), "IOSXRExtensibleManagabilityService.GetModelsInput")
	proto.RegisterType((*GetModelsOutput)(nil), "IOSXRExtensibleManagabilityService.GetModelsOutput")
	proto.RegisterType((*GetModelsOutput_ModelInfo)(nil), "IOSXRExtensibleManagabilityService.GetModelsOutput.ModelInfo")
	proto.RegisterType((*GetProtoFileArgs)(nil), "IOSXRExtensibleManagabilityService.GetProtoFileArgs")
	proto.RegisterType((*GetProtoFileReply)(nil), "IOSXRExtensibleManagabilityService.GetProtoFileReply")
	proto.RegisterEnum("IOSXRExtensibleManagabilityService.CommitResult", CommitResult_name, CommitResult_value)
	proto.RegisterEnum("IOSXRExtensibleManagabilityService.OC_RPC_RESPONSE_TYPE", OC_RPC_RESPONSE_TYPE_name, OC_RPC_RESPONSE_TYPE_value)
	proto.RegisterEnum("IOSXRExtensibleManagabilityService.GET_MODEL_TYPE", GET_MODEL_TYPE_name, GET_MODEL_TYPE_value)
	proto.RegisterEnum("IOSXRExtensibleManagabilityService.TelemetryStreamDestination_TSP", TelemetryStreamDestination_TSP_name, TelemetryStreamDestination_TSP_value)
	proto.RegisterEnum("IOSXRExtensibleManagabilityService.SubscriptionList_ENC_SPEC", SubscriptionList_ENC_SPEC_name, SubscriptionList_ENC_SPEC_value)
	proto.RegisterEnum("IOSXRExtensibleManagabilityService.GetModelsInput_MODLE_REQUEST_TYPE", GetModelsInput_MODLE_REQUEST_TYPE_name, GetModelsInput_MODLE_REQUEST_TYPE_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GRPCConfigOper service

type GRPCConfigOperClient interface {
	GetConfig(ctx context.Context, in *ConfigGetArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetConfigClient, error)
	MergeConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error)
	DeleteConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error)
	ReplaceConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error)
	CliConfig(ctx context.Context, in *CliConfigArgs, opts ...grpc.CallOption) (*CliConfigReply, error)
	CommitReplace(ctx context.Context, in *CommitReplaceArgs, opts ...grpc.CallOption) (*CommitReplaceReply, error)
	// Do we need implicit or explicit commit
	//
	CommitConfig(ctx context.Context, in *CommitArgs, opts ...grpc.CallOption) (*CommitReply, error)
	ConfigDiscardChanges(ctx context.Context, in *DiscardChangesArgs, opts ...grpc.CallOption) (*DiscardChangesReply, error)
	// Get only returns oper data
	//
	GetOper(ctx context.Context, in *GetOperArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetOperClient, error)
	// Get Telemetry Data
	CreateSubs(ctx context.Context, in *CreateSubsArgs, opts ...grpc.CallOption) (GRPCConfigOper_CreateSubsClient, error)
	// Get Proto File
	GetProtoFile(ctx context.Context, in *GetProtoFileArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetProtoFileClient, error)
}

type gRPCConfigOperClient struct {
	cc *grpc.ClientConn
}

func NewGRPCConfigOperClient(cc *grpc.ClientConn) GRPCConfigOperClient {
	return &gRPCConfigOperClient{cc}
}

func (c *gRPCConfigOperClient) GetConfig(ctx context.Context, in *ConfigGetArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetConfigClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GRPCConfigOper_serviceDesc.Streams[0], c.cc, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/GetConfig", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCConfigOperGetConfigClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCConfigOper_GetConfigClient interface {
	Recv() (*ConfigGetReply, error)
	grpc.ClientStream
}

type gRPCConfigOperGetConfigClient struct {
	grpc.ClientStream
}

func (x *gRPCConfigOperGetConfigClient) Recv() (*ConfigGetReply, error) {
	m := new(ConfigGetReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCConfigOperClient) MergeConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error) {
	out := new(ConfigReply)
	err := grpc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/MergeConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) DeleteConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error) {
	out := new(ConfigReply)
	err := grpc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/DeleteConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) ReplaceConfig(ctx context.Context, in *ConfigArgs, opts ...grpc.CallOption) (*ConfigReply, error) {
	out := new(ConfigReply)
	err := grpc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/ReplaceConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) CliConfig(ctx context.Context, in *CliConfigArgs, opts ...grpc.CallOption) (*CliConfigReply, error) {
	out := new(CliConfigReply)
	err := grpc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CliConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) CommitReplace(ctx context.Context, in *CommitReplaceArgs, opts ...grpc.CallOption) (*CommitReplaceReply, error) {
	out := new(CommitReplaceReply)
	err := grpc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitReplace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) CommitConfig(ctx context.Context, in *CommitArgs, opts ...grpc.CallOption) (*CommitReply, error) {
	out := new(CommitReply)
	err := grpc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) ConfigDiscardChanges(ctx context.Context, in *DiscardChangesArgs, opts ...grpc.CallOption) (*DiscardChangesReply, error) {
	out := new(DiscardChangesReply)
	err := grpc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/ConfigDiscardChanges", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCConfigOperClient) GetOper(ctx context.Context, in *GetOperArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetOperClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GRPCConfigOper_serviceDesc.Streams[1], c.cc, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/GetOper", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCConfigOperGetOperClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCConfigOper_GetOperClient interface {
	Recv() (*GetOperReply, error)
	grpc.ClientStream
}

type gRPCConfigOperGetOperClient struct {
	grpc.ClientStream
}

func (x *gRPCConfigOperGetOperClient) Recv() (*GetOperReply, error) {
	m := new(GetOperReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCConfigOperClient) CreateSubs(ctx context.Context, in *CreateSubsArgs, opts ...grpc.CallOption) (GRPCConfigOper_CreateSubsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GRPCConfigOper_serviceDesc.Streams[2], c.cc, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CreateSubs", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCConfigOperCreateSubsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCConfigOper_CreateSubsClient interface {
	Recv() (*CreateSubsReply, error)
	grpc.ClientStream
}

type gRPCConfigOperCreateSubsClient struct {
	grpc.ClientStream
}

func (x *gRPCConfigOperCreateSubsClient) Recv() (*CreateSubsReply, error) {
	m := new(CreateSubsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCConfigOperClient) GetProtoFile(ctx context.Context, in *GetProtoFileArgs, opts ...grpc.CallOption) (GRPCConfigOper_GetProtoFileClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GRPCConfigOper_serviceDesc.Streams[3], c.cc, "/IOSXRExtensibleManagabilityService.gRPCConfigOper/GetProtoFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCConfigOperGetProtoFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCConfigOper_GetProtoFileClient interface {
	Recv() (*GetProtoFileReply, error)
	grpc.ClientStream
}

type gRPCConfigOperGetProtoFileClient struct {
	grpc.ClientStream
}

func (x *gRPCConfigOperGetProtoFileClient) Recv() (*GetProtoFileReply, error) {
	m := new(GetProtoFileReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GRPCConfigOper service

type GRPCConfigOperServer interface {
	GetConfig(*ConfigGetArgs, GRPCConfigOper_GetConfigServer) error
	MergeConfig(context.Context, *ConfigArgs) (*ConfigReply, error)
	DeleteConfig(context.Context, *ConfigArgs) (*ConfigReply, error)
	ReplaceConfig(context.Context, *ConfigArgs) (*ConfigReply, error)
	CliConfig(context.Context, *CliConfigArgs) (*CliConfigReply, error)
	CommitReplace(context.Context, *CommitReplaceArgs) (*CommitReplaceReply, error)
	// Do we need implicit or explicit commit
	//
	CommitConfig(context.Context, *CommitArgs) (*CommitReply, error)
	ConfigDiscardChanges(context.Context, *DiscardChangesArgs) (*DiscardChangesReply, error)
	// Get only returns oper data
	//
	GetOper(*GetOperArgs, GRPCConfigOper_GetOperServer) error
	// Get Telemetry Data
	CreateSubs(*CreateSubsArgs, GRPCConfigOper_CreateSubsServer) error
	// Get Proto File
	GetProtoFile(*GetProtoFileArgs, GRPCConfigOper_GetProtoFileServer) error
}

func RegisterGRPCConfigOperServer(s *grpc.Server, srv GRPCConfigOperServer) {
	s.RegisterService(&_GRPCConfigOper_serviceDesc, srv)
}

func _GRPCConfigOper_GetConfig_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigGetArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCConfigOperServer).GetConfig(m, &gRPCConfigOperGetConfigServer{stream})
}

type GRPCConfigOper_GetConfigServer interface {
	Send(*ConfigGetReply) error
	grpc.ServerStream
}

type gRPCConfigOperGetConfigServer struct {
	grpc.ServerStream
}

func (x *gRPCConfigOperGetConfigServer) Send(m *ConfigGetReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCConfigOper_MergeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).MergeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/MergeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).MergeConfig(ctx, req.(*ConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).DeleteConfig(ctx, req.(*ConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_ReplaceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).ReplaceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/ReplaceConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).ReplaceConfig(ctx, req.(*ConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_CliConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CliConfigArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).CliConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CliConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).CliConfig(ctx, req.(*CliConfigArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_CommitReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitReplaceArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).CommitReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).CommitReplace(ctx, req.(*CommitReplaceArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_CommitConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).CommitConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/CommitConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).CommitConfig(ctx, req.(*CommitArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_ConfigDiscardChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardChangesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCConfigOperServer).ConfigDiscardChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.gRPCConfigOper/ConfigDiscardChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCConfigOperServer).ConfigDiscardChanges(ctx, req.(*DiscardChangesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCConfigOper_GetOper_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOperArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCConfigOperServer).GetOper(m, &gRPCConfigOperGetOperServer{stream})
}

type GRPCConfigOper_GetOperServer interface {
	Send(*GetOperReply) error
	grpc.ServerStream
}

type gRPCConfigOperGetOperServer struct {
	grpc.ServerStream
}

func (x *gRPCConfigOperGetOperServer) Send(m *GetOperReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCConfigOper_CreateSubs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateSubsArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCConfigOperServer).CreateSubs(m, &gRPCConfigOperCreateSubsServer{stream})
}

type GRPCConfigOper_CreateSubsServer interface {
	Send(*CreateSubsReply) error
	grpc.ServerStream
}

type gRPCConfigOperCreateSubsServer struct {
	grpc.ServerStream
}

func (x *gRPCConfigOperCreateSubsServer) Send(m *CreateSubsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCConfigOper_GetProtoFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetProtoFileArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCConfigOperServer).GetProtoFile(m, &gRPCConfigOperGetProtoFileServer{stream})
}

type GRPCConfigOper_GetProtoFileServer interface {
	Send(*GetProtoFileReply) error
	grpc.ServerStream
}

type gRPCConfigOperGetProtoFileServer struct {
	grpc.ServerStream
}

func (x *gRPCConfigOperGetProtoFileServer) Send(m *GetProtoFileReply) error {
	return x.ServerStream.SendMsg(m)
}

var _GRPCConfigOper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "IOSXRExtensibleManagabilityService.gRPCConfigOper",
	HandlerType: (*GRPCConfigOperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MergeConfig",
			Handler:    _GRPCConfigOper_MergeConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _GRPCConfigOper_DeleteConfig_Handler,
		},
		{
			MethodName: "ReplaceConfig",
			Handler:    _GRPCConfigOper_ReplaceConfig_Handler,
		},
		{
			MethodName: "CliConfig",
			Handler:    _GRPCConfigOper_CliConfig_Handler,
		},
		{
			MethodName: "CommitReplace",
			Handler:    _GRPCConfigOper_CommitReplace_Handler,
		},
		{
			MethodName: "CommitConfig",
			Handler:    _GRPCConfigOper_CommitConfig_Handler,
		},
		{
			MethodName: "ConfigDiscardChanges",
			Handler:    _GRPCConfigOper_ConfigDiscardChanges_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetConfig",
			Handler:       _GRPCConfigOper_GetConfig_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetOper",
			Handler:       _GRPCConfigOper_GetOper_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateSubs",
			Handler:       _GRPCConfigOper_CreateSubs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetProtoFile",
			Handler:       _GRPCConfigOper_GetProtoFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ems_grpc.proto",
}

// Client API for GRPCExec service

type GRPCExecClient interface {
	// Exec commands
	ShowCmdTextOutput(ctx context.Context, in *ShowCmdArgs, opts ...grpc.CallOption) (GRPCExec_ShowCmdTextOutputClient, error)
	ShowCmdJSONOutput(ctx context.Context, in *ShowCmdArgs, opts ...grpc.CallOption) (GRPCExec_ShowCmdJSONOutputClient, error)
	ActionJSON(ctx context.Context, in *ActionJSONArgs, opts ...grpc.CallOption) (GRPCExec_ActionJSONClient, error)
}

type gRPCExecClient struct {
	cc *grpc.ClientConn
}

func NewGRPCExecClient(cc *grpc.ClientConn) GRPCExecClient {
	return &gRPCExecClient{cc}
}

func (c *gRPCExecClient) ShowCmdTextOutput(ctx context.Context, in *ShowCmdArgs, opts ...grpc.CallOption) (GRPCExec_ShowCmdTextOutputClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GRPCExec_serviceDesc.Streams[0], c.cc, "/IOSXRExtensibleManagabilityService.gRPCExec/ShowCmdTextOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCExecShowCmdTextOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCExec_ShowCmdTextOutputClient interface {
	Recv() (*ShowCmdTextReply, error)
	grpc.ClientStream
}

type gRPCExecShowCmdTextOutputClient struct {
	grpc.ClientStream
}

func (x *gRPCExecShowCmdTextOutputClient) Recv() (*ShowCmdTextReply, error) {
	m := new(ShowCmdTextReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCExecClient) ShowCmdJSONOutput(ctx context.Context, in *ShowCmdArgs, opts ...grpc.CallOption) (GRPCExec_ShowCmdJSONOutputClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GRPCExec_serviceDesc.Streams[1], c.cc, "/IOSXRExtensibleManagabilityService.gRPCExec/ShowCmdJSONOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCExecShowCmdJSONOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCExec_ShowCmdJSONOutputClient interface {
	Recv() (*ShowCmdJSONReply, error)
	grpc.ClientStream
}

type gRPCExecShowCmdJSONOutputClient struct {
	grpc.ClientStream
}

func (x *gRPCExecShowCmdJSONOutputClient) Recv() (*ShowCmdJSONReply, error) {
	m := new(ShowCmdJSONReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCExecClient) ActionJSON(ctx context.Context, in *ActionJSONArgs, opts ...grpc.CallOption) (GRPCExec_ActionJSONClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GRPCExec_serviceDesc.Streams[2], c.cc, "/IOSXRExtensibleManagabilityService.gRPCExec/ActionJSON", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCExecActionJSONClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCExec_ActionJSONClient interface {
	Recv() (*ActionJSONReply, error)
	grpc.ClientStream
}

type gRPCExecActionJSONClient struct {
	grpc.ClientStream
}

func (x *gRPCExecActionJSONClient) Recv() (*ActionJSONReply, error) {
	m := new(ActionJSONReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GRPCExec service

type GRPCExecServer interface {
	// Exec commands
	ShowCmdTextOutput(*ShowCmdArgs, GRPCExec_ShowCmdTextOutputServer) error
	ShowCmdJSONOutput(*ShowCmdArgs, GRPCExec_ShowCmdJSONOutputServer) error
	ActionJSON(*ActionJSONArgs, GRPCExec_ActionJSONServer) error
}

func RegisterGRPCExecServer(s *grpc.Server, srv GRPCExecServer) {
	s.RegisterService(&_GRPCExec_serviceDesc, srv)
}

func _GRPCExec_ShowCmdTextOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShowCmdArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCExecServer).ShowCmdTextOutput(m, &gRPCExecShowCmdTextOutputServer{stream})
}

type GRPCExec_ShowCmdTextOutputServer interface {
	Send(*ShowCmdTextReply) error
	grpc.ServerStream
}

type gRPCExecShowCmdTextOutputServer struct {
	grpc.ServerStream
}

func (x *gRPCExecShowCmdTextOutputServer) Send(m *ShowCmdTextReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCExec_ShowCmdJSONOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ShowCmdArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCExecServer).ShowCmdJSONOutput(m, &gRPCExecShowCmdJSONOutputServer{stream})
}

type GRPCExec_ShowCmdJSONOutputServer interface {
	Send(*ShowCmdJSONReply) error
	grpc.ServerStream
}

type gRPCExecShowCmdJSONOutputServer struct {
	grpc.ServerStream
}

func (x *gRPCExecShowCmdJSONOutputServer) Send(m *ShowCmdJSONReply) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCExec_ActionJSON_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionJSONArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCExecServer).ActionJSON(m, &gRPCExecActionJSONServer{stream})
}

type GRPCExec_ActionJSONServer interface {
	Send(*ActionJSONReply) error
	grpc.ServerStream
}

type gRPCExecActionJSONServer struct {
	grpc.ServerStream
}

func (x *gRPCExecActionJSONServer) Send(m *ActionJSONReply) error {
	return x.ServerStream.SendMsg(m)
}

var _GRPCExec_serviceDesc = grpc.ServiceDesc{
	ServiceName: "IOSXRExtensibleManagabilityService.gRPCExec",
	HandlerType: (*GRPCExecServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShowCmdTextOutput",
			Handler:       _GRPCExec_ShowCmdTextOutput_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ShowCmdJSONOutput",
			Handler:       _GRPCExec_ShowCmdJSONOutput_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ActionJSON",
			Handler:       _GRPCExec_ActionJSON_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ems_grpc.proto",
}

// Client API for OpenConfiggRPC service

type OpenConfiggRPCClient interface {
	SubscribeTelemetry(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (OpenConfiggRPC_SubscribeTelemetryClient, error)
	UnSubscribeTelemetry(ctx context.Context, in *CancelSubscribeReq, opts ...grpc.CallOption) (*SubscribeResponse, error)
	// get-models rpc implementation per
	// github.com/openconfig/public/blob/master/release/models/rpc/openconfig-rpc.yang
	GetModels(ctx context.Context, in *GetModelsInput, opts ...grpc.CallOption) (*GetModelsOutput, error)
}

type openConfiggRPCClient struct {
	cc *grpc.ClientConn
}

func NewOpenConfiggRPCClient(cc *grpc.ClientConn) OpenConfiggRPCClient {
	return &openConfiggRPCClient{cc}
}

func (c *openConfiggRPCClient) SubscribeTelemetry(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (OpenConfiggRPC_SubscribeTelemetryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_OpenConfiggRPC_serviceDesc.Streams[0], c.cc, "/IOSXRExtensibleManagabilityService.OpenConfiggRPC/SubscribeTelemetry", opts...)
	if err != nil {
		return nil, err
	}
	x := &openConfiggRPCSubscribeTelemetryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OpenConfiggRPC_SubscribeTelemetryClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type openConfiggRPCSubscribeTelemetryClient struct {
	grpc.ClientStream
}

func (x *openConfiggRPCSubscribeTelemetryClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *openConfiggRPCClient) UnSubscribeTelemetry(ctx context.Context, in *CancelSubscribeReq, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := grpc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.OpenConfiggRPC/UnSubscribeTelemetry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openConfiggRPCClient) GetModels(ctx context.Context, in *GetModelsInput, opts ...grpc.CallOption) (*GetModelsOutput, error) {
	out := new(GetModelsOutput)
	err := grpc.Invoke(ctx, "/IOSXRExtensibleManagabilityService.OpenConfiggRPC/GetModels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpenConfiggRPC service

type OpenConfiggRPCServer interface {
	SubscribeTelemetry(*SubscribeRequest, OpenConfiggRPC_SubscribeTelemetryServer) error
	UnSubscribeTelemetry(context.Context, *CancelSubscribeReq) (*SubscribeResponse, error)
	// get-models rpc implementation per
	// github.com/openconfig/public/blob/master/release/models/rpc/openconfig-rpc.yang
	GetModels(context.Context, *GetModelsInput) (*GetModelsOutput, error)
}

func RegisterOpenConfiggRPCServer(s *grpc.Server, srv OpenConfiggRPCServer) {
	s.RegisterService(&_OpenConfiggRPC_serviceDesc, srv)
}

func _OpenConfiggRPC_SubscribeTelemetry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OpenConfiggRPCServer).SubscribeTelemetry(m, &openConfiggRPCSubscribeTelemetryServer{stream})
}

type OpenConfiggRPC_SubscribeTelemetryServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type openConfiggRPCSubscribeTelemetryServer struct {
	grpc.ServerStream
}

func (x *openConfiggRPCSubscribeTelemetryServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OpenConfiggRPC_UnSubscribeTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSubscribeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenConfiggRPCServer).UnSubscribeTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.OpenConfiggRPC/UnSubscribeTelemetry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenConfiggRPCServer).UnSubscribeTelemetry(ctx, req.(*CancelSubscribeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenConfiggRPC_GetModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenConfiggRPCServer).GetModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IOSXRExtensibleManagabilityService.OpenConfiggRPC/GetModels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenConfiggRPCServer).GetModels(ctx, req.(*GetModelsInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenConfiggRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "IOSXRExtensibleManagabilityService.OpenConfiggRPC",
	HandlerType: (*OpenConfiggRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnSubscribeTelemetry",
			Handler:    _OpenConfiggRPC_UnSubscribeTelemetry_Handler,
		},
		{
			MethodName: "GetModels",
			Handler:    _OpenConfiggRPC_GetModels_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeTelemetry",
			Handler:       _OpenConfiggRPC_SubscribeTelemetry_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ems_grpc.proto",
}

func init() { proto.RegisterFile("ems_grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1889 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x5f, 0x73, 0xdb, 0x58,
	0x15, 0xb7, 0xac, 0x34, 0x89, 0x8f, 0xff, 0x44, 0xbd, 0x1b, 0xd8, 0xac, 0x77, 0x87, 0x09, 0x82,
	0xd9, 0x0d, 0x9d, 0xc1, 0x2d, 0x6e, 0x0b, 0xcc, 0x30, 0xbb, 0x83, 0x23, 0xab, 0x8e, 0x52, 0xdb,
	0xd2, 0x5e, 0xc9, 0x85, 0xcc, 0xc0, 0x0a, 0xc5, 0xbe, 0x75, 0x05, 0xb6, 0xe4, 0x4a, 0xd7, 0xa5,
	0x79, 0x60, 0x81, 0x19, 0x76, 0x98, 0x7d, 0xe5, 0x71, 0xbf, 0x0a, 0x2f, 0x0c, 0x2f, 0xfb, 0x31,
	0xf8, 0x26, 0x0c, 0x73, 0xaf, 0xfe, 0x58, 0x4a, 0xeb, 0x44, 0x4e, 0x69, 0x9f, 0x7c, 0xcf, 0xb1,
	0xce, 0xef, 0xfc, 0xbd, 0xe7, 0xde, 0x7b, 0xa0, 0x41, 0xe6, 0xa1, 0x3d, 0x0d, 0x16, 0xe3, 0xd6,
	0x22, 0xf0, 0xa9, 0x8f, 0x64, 0x4d, 0x37, 0x7f, 0x8d, 0xd5, 0x97, 0x94, 0x78, 0xa1, 0x7b, 0x3e,
	0x23, 0x03, 0xc7, 0x73, 0xa6, 0xce, 0xb9, 0x3b, 0x73, 0xe9, 0x85, 0x49, 0x82, 0x17, 0xee, 0x98,
	0xc8, 0x1a, 0xd4, 0x15, 0xdf, 0x7b, 0xea, 0x4e, 0x7b, 0x84, 0x76, 0x82, 0x69, 0x88, 0xf6, 0xe1,
	0x16, 0x26, 0xcf, 0xb5, 0xc9, 0x81, 0x70, 0x28, 0x1c, 0x89, 0x38, 0x22, 0x90, 0x0c, 0xb5, 0x0b,
	0xc7, 0x9b, 0x2e, 0x1c, 0xfa, 0xec, 0xf7, 0xa1, 0xef, 0x1d, 0x94, 0x0f, 0x85, 0xa3, 0x0a, 0xce,
	0xf1, 0xe4, 0xdf, 0x41, 0x23, 0x85, 0xc2, 0x64, 0x31, 0xbb, 0x40, 0x4d, 0xd8, 0xc5, 0x24, 0xcc,
	0xc2, 0xa5, 0x34, 0xfb, 0x8f, 0x49, 0x67, 0xd0, 0x52, 0x1a, 0x7d, 0x17, 0xb6, 0x49, 0x10, 0xf8,
	0x41, 0x78, 0x20, 0xf2, 0x7f, 0x62, 0x4a, 0xee, 0x41, 0xb5, 0x47, 0xa8, 0xbe, 0x20, 0xc1, 0x1b,
	0x9a, 0xfa, 0x05, 0xd4, 0x62, 0xa0, 0xb7, 0x63, 0xe8, 0xdf, 0x04, 0x80, 0x28, 0x16, 0x57, 0x18,
	0x7a, 0x15, 0xf0, 0x47, 0x50, 0xe1, 0xf2, 0xc1, 0x9c, 0x4c, 0x38, 0xf6, 0x2e, 0x5e, 0x31, 0xd0,
	0xc7, 0x71, 0xa4, 0x83, 0xb9, 0xe5, 0xce, 0x89, 0xbf, 0xa4, 0x07, 0x5b, 0x87, 0xc2, 0x51, 0x1d,
	0x5f, 0xe2, 0xca, 0xbf, 0x85, 0x6a, 0x64, 0xc5, 0xf5, 0x5e, 0xae, 0x3c, 0x29, 0x67, 0x3d, 0x61,
	0x32, 0x8a, 0x3f, 0x9f, 0xbb, 0x54, 0xeb, 0x72, 0x3b, 0xea, 0x38, 0xa5, 0xe5, 0x3f, 0x41, 0x5d,
	0x99, 0xb9, 0xd7, 0xfa, 0x29, 0x81, 0x38, 0x9e, 0xb9, 0x31, 0x2e, 0x5b, 0xfe, 0x9f, 0xbc, 0x63,
	0xf5, 0x96, 0xa8, 0x7f, 0x3b, 0x0e, 0xfe, 0x0a, 0x6e, 0x47, 0x6b, 0x06, 0xef, 0x8c, 0xc9, 0x46,
	0x4e, 0x66, 0xd3, 0x2b, 0xe6, 0xd3, 0x2b, 0x9f, 0x00, 0xca, 0x01, 0xdf, 0xd8, 0x7c, 0xf9, 0x17,
	0x2c, 0x94, 0x0c, 0x69, 0x10, 0x4e, 0x99, 0x69, 0x33, 0xe7, 0x9c, 0xcc, 0xb8, 0x74, 0x05, 0x47,
	0x04, 0x3a, 0x80, 0x9d, 0xb1, 0x3f, 0x9f, 0x13, 0x8f, 0xc6, 0xb2, 0x09, 0x29, 0x7f, 0xc6, 0xaa,
	0x94, 0x09, 0x5f, 0x5d, 0xa5, 0x69, 0x7c, 0xca, 0x97, 0xe2, 0xd3, 0x61, 0xf5, 0x95, 0xb8, 0x71,
	0x33, 0xfb, 0xef, 0x00, 0xea, 0xba, 0xe1, 0xd8, 0x09, 0x26, 0xca, 0x33, 0xc7, 0x9b, 0x92, 0x70,
	0xbd, 0x29, 0xb2, 0x06, 0xef, 0xe5, 0xbf, 0xbd, 0xb9, 0xda, 0x87, 0x50, 0x35, 0x9f, 0xf9, 0x7f,
	0x54, 0xe6, 0x93, 0x4d, 0x72, 0x2a, 0x7f, 0x01, 0x52, 0x2c, 0x66, 0x91, 0x97, 0xc5, 0xbc, 0xf6,
	0x97, 0x74, 0xb1, 0x4c, 0x22, 0x1f, 0x53, 0x6b, 0xfb, 0xc6, 0xd3, 0x14, 0xff, 0xd4, 0xd4, 0x87,
	0xd7, 0xe3, 0x7f, 0x0f, 0x80, 0xd5, 0x53, 0x4e, 0x47, 0x86, 0xb3, 0x56, 0xcf, 0xc7, 0x00, 0x9f,
	0xeb, 0xe6, 0xc0, 0x09, 0xfe, 0xe0, 0x7a, 0x53, 0x56, 0x20, 0xf3, 0x68, 0xc9, 0x15, 0xd4, 0x71,
	0x42, 0xca, 0xff, 0x16, 0xa0, 0xa1, 0x04, 0xc4, 0xa1, 0xc4, 0x5c, 0x9e, 0x5f, 0x91, 0x1a, 0xae,
	0xc8, 0x1b, 0xfb, 0x13, 0xc2, 0x8d, 0x10, 0x71, 0x4c, 0x31, 0xe3, 0xc3, 0xe5, 0xb9, 0x3b, 0x09,
	0x69, 0x90, 0x6c, 0x82, 0x84, 0x46, 0xbf, 0x04, 0xf1, 0xb9, 0x1f, 0xf2, 0xcd, 0x5d, 0x6d, 0xb7,
	0x5a, 0xd7, 0x1f, 0x56, 0xad, 0x95, 0xcd, 0x98, 0x89, 0xa2, 0x1f, 0x42, 0x9d, 0xd9, 0x35, 0x0e,
	0xdc, 0x05, 0x75, 0x7d, 0x2f, 0x3c, 0xb8, 0x75, 0x28, 0x1e, 0x55, 0x70, 0x9e, 0x29, 0x9f, 0x42,
	0xa3, 0x33, 0x66, 0x4b, 0x16, 0xd3, 0x37, 0x3c, 0x38, 0x1c, 0xd8, 0x5b, 0x61, 0xbd, 0x9d, 0xb3,
	0xe3, 0x0c, 0xf6, 0x56, 0x21, 0xbf, 0x5e, 0x05, 0x82, 0xad, 0x89, 0x43, 0x1d, 0x0e, 0x5f, 0xc3,
	0x7c, 0xbd, 0x16, 0xfa, 0x6b, 0x01, 0xa4, 0x38, 0x36, 0xe7, 0x04, 0x93, 0xe7, 0x4b, 0x12, 0xd2,
	0x35, 0xc1, 0xb0, 0xa0, 0x12, 0x26, 0x5f, 0x72, 0xec, 0x6a, 0xfb, 0x41, 0x91, 0x14, 0x65, 0x43,
	0xdf, 0x77, 0x43, 0x7a, 0x52, 0xc2, 0x2b, 0xa0, 0xe3, 0x0a, 0xec, 0x04, 0x91, 0x5a, 0xf9, 0x9b,
	0x32, 0x34, 0x2d, 0x32, 0x23, 0x73, 0x42, 0x83, 0x0b, 0x93, 0x06, 0xc4, 0x99, 0x77, 0x49, 0x48,
	0x5d, 0xcf, 0x61, 0xa2, 0xe8, 0x2e, 0xbc, 0x37, 0x59, 0x91, 0xb6, 0x33, 0x99, 0x04, 0x24, 0x0c,
	0xe3, 0xc6, 0x86, 0x32, 0x7f, 0x75, 0xa2, 0x7f, 0xd0, 0x8f, 0x40, 0xca, 0x0a, 0x2c, 0xfc, 0x80,
	0xc6, 0xfd, 0x6a, 0x2f, 0xc3, 0x37, 0xfc, 0x80, 0xa2, 0x2f, 0xe1, 0x03, 0x9a, 0x68, 0xb6, 0x43,
	0xae, 0xda, 0xe6, 0x37, 0xa6, 0xb1, 0x3f, 0xe3, 0x11, 0x6b, 0xb4, 0x8f, 0x8b, 0xf8, 0xba, 0xde,
	0xfc, 0x96, 0x65, 0x1a, 0xf8, 0x7d, 0x9a, 0xff, 0xdf, 0x88, 0x55, 0xc8, 0x87, 0x20, 0x5a, 0xa6,
	0x81, 0xaa, 0xb0, 0x63, 0x99, 0x86, 0x6d, 0x29, 0x86, 0x54, 0x42, 0x35, 0xd8, 0x65, 0x44, 0x0f,
	0x1b, 0x8a, 0x24, 0xc8, 0x3f, 0x80, 0x7a, 0x0a, 0x6e, 0x38, 0xf4, 0x19, 0xcb, 0x32, 0xfb, 0x8d,
	0xfd, 0xe7, 0x6b, 0xf9, 0x3f, 0x62, 0x9a, 0xcd, 0x34, 0xdc, 0xe8, 0x2f, 0x02, 0x7c, 0xb8, 0xde,
	0x2e, 0x16, 0x40, 0xf1, 0xa8, 0xda, 0xfe, 0xec, 0xcd, 0xdc, 0xc3, 0x57, 0xa9, 0x40, 0x67, 0xd0,
	0xc8, 0x19, 0xcf, 0x7a, 0x2f, 0x53, 0xfa, 0x93, 0x8d, 0x94, 0x32, 0x49, 0x7c, 0x09, 0x08, 0x7d,
	0x02, 0x7b, 0xa1, 0x33, 0x5f, 0xcc, 0x88, 0xed, 0x7a, 0x94, 0x04, 0x2f, 0x9c, 0x28, 0x5f, 0x5b,
	0xb8, 0x11, 0xb1, 0xb5, 0x98, 0x8b, 0xce, 0x60, 0x97, 0x77, 0x20, 0xd6, 0xd3, 0xb6, 0x78, 0x46,
	0x3f, 0xbd, 0x49, 0xf5, 0xb6, 0xd4, 0xa1, 0x62, 0x9b, 0x86, 0xaa, 0xe0, 0x14, 0x2e, 0x69, 0x5b,
	0xb7, 0x6e, 0xdc, 0xb6, 0xe4, 0x4f, 0x60, 0x37, 0xc1, 0x45, 0x0d, 0x00, 0xb6, 0x7e, 0xfc, 0xc4,
	0xee, 0x19, 0xc7, 0x52, 0x89, 0x15, 0x05, 0xa3, 0x19, 0x21, 0xc8, 0x7f, 0x15, 0xa0, 0x61, 0x52,
	0x87, 0x2e, 0x43, 0x4c, 0xc2, 0x85, 0xef, 0x85, 0x04, 0x7d, 0x1f, 0x6a, 0x73, 0x12, 0x86, 0xce,
	0x94, 0xd8, 0xbc, 0xab, 0x44, 0x05, 0x51, 0x8d, 0x79, 0xa7, 0xac, 0xb1, 0xf4, 0x61, 0x2b, 0xed,
	0xc4, 0x8d, 0xf6, 0xcf, 0x8b, 0x58, 0xa8, 0x2b, 0x36, 0x36, 0x14, 0x1b, 0xab, 0xa6, 0xa1, 0x0f,
	0x4d, 0xd5, 0xb6, 0xce, 0x0c, 0x15, 0x73, 0x14, 0x59, 0x86, 0xda, 0xd0, 0xa7, 0xee, 0x53, 0x77,
	0x1c, 0x6d, 0xcc, 0xa4, 0xdf, 0x08, 0xab, 0x7e, 0x23, 0xff, 0x57, 0x80, 0xdb, 0x99, 0xbe, 0x12,
	0x9b, 0x7a, 0x55, 0xd7, 0x62, 0x89, 0xcc, 0xc4, 0xda, 0x76, 0x27, 0xdc, 0x5c, 0x96, 0xc8, 0x0c,
	0x5b, 0x9b, 0xa0, 0x53, 0xd8, 0x5e, 0x2e, 0x26, 0x0e, 0x25, 0x3c, 0xd1, 0xd5, 0xf6, 0xbd, 0x22,
	0xee, 0x64, 0x0d, 0x3e, 0x29, 0xe1, 0x18, 0x01, 0xf5, 0x61, 0x3b, 0xe4, 0xd1, 0x8c, 0xcf, 0x9c,
	0x76, 0xa1, 0x92, 0xc8, 0xc5, 0x9f, 0xa1, 0x45, 0x18, 0xc7, 0x00, 0xbb, 0x41, 0xcc, 0x95, 0x4d,
	0x40, 0x8a, 0xe3, 0x8d, 0xc9, 0x2c, 0xdb, 0x5d, 0xd7, 0x74, 0xd6, 0xa2, 0xae, 0xcb, 0xff, 0x28,
	0x43, 0xa3, 0x47, 0xe8, 0xc0, 0x9f, 0x90, 0x59, 0xa8, 0x79, 0xec, 0x3c, 0xff, 0x08, 0x2a, 0x71,
	0xff, 0x8c, 0x51, 0xb7, 0xf0, 0x8a, 0xc1, 0x52, 0xe3, 0x39, 0x73, 0x12, 0x9f, 0x34, 0x7c, 0xcd,
	0x24, 0xd8, 0x6f, 0xb8, 0x70, 0xc6, 0x24, 0x3e, 0x0d, 0x56, 0x0c, 0x76, 0xf2, 0xbf, 0x20, 0x41,
	0xe8, 0xfa, 0x1e, 0x0f, 0x49, 0x05, 0x27, 0x24, 0x9a, 0x42, 0x35, 0x06, 0xb6, 0x2e, 0x16, 0x84,
	0x57, 0x7b, 0xa3, 0xad, 0x16, 0x09, 0x58, 0xde, 0xe4, 0xd6, 0x40, 0xef, 0xf6, 0x55, 0x1b, 0xab,
	0x9f, 0x8f, 0x54, 0xd3, 0x8a, 0x0a, 0x2b, 0x8b, 0x2c, 0xff, 0x18, 0xd0, 0xab, 0x9f, 0xb0, 0x6d,
	0x60, 0x8e, 0x06, 0x83, 0x0e, 0x3e, 0x93, 0x4a, 0x08, 0x60, 0xbb, 0xab, 0x5a, 0x1d, 0xad, 0x2f,
	0x09, 0xf2, 0xbf, 0x44, 0xd8, 0x4b, 0x35, 0xe8, 0xd1, 0x2d, 0xe7, 0xea, 0xa8, 0x8c, 0x60, 0x7b,
	0xce, 0xbf, 0x8e, 0xdb, 0xd0, 0xa7, 0x1b, 0x39, 0x11, 0xa9, 0x68, 0x71, 0x42, 0xf3, 0x9e, 0xfa,
	0x38, 0x06, 0x43, 0xbf, 0x81, 0x5a, 0x92, 0x7e, 0x85, 0xed, 0x36, 0xf1, 0x0d, 0x77, 0x5b, 0x0e,
	0x8d, 0x5d, 0x3d, 0xe7, 0xe1, 0x34, 0x4e, 0x0a, 0x5b, 0x36, 0xbf, 0x15, 0xa0, 0x92, 0x5a, 0x91,
	0xa6, 0x5a, 0x58, 0x97, 0xea, 0xf2, 0x15, 0xa9, 0x16, 0xf3, 0xa9, 0x36, 0xa0, 0xc2, 0x7d, 0xe2,
	0x89, 0x8e, 0x9a, 0x65, 0xa1, 0x9d, 0xd1, 0x53, 0x2d, 0x7b, 0xa0, 0x77, 0xd5, 0x7e, 0xe4, 0xc0,
	0x0a, 0x84, 0x59, 0xc2, 0x89, 0x2e, 0x6b, 0x14, 0xb7, 0x22, 0x4b, 0x52, 0x86, 0xdc, 0x05, 0xa9,
	0x47, 0x28, 0x3f, 0x0d, 0x1f, 0xb9, 0xb3, 0xf4, 0x51, 0x15, 0x64, 0xb7, 0x4a, 0x90, 0xbd, 0x3e,
	0xf1, 0x93, 0x2f, 0x73, 0x7d, 0xe2, 0xa7, 0x1f, 0x81, 0xdb, 0x59, 0x94, 0xe8, 0xa2, 0xf4, 0x7a,
	0x18, 0x19, 0x6a, 0xfc, 0x78, 0x57, 0x7c, 0x8f, 0xae, 0x5e, 0x41, 0x39, 0xde, 0xba, 0x2b, 0xd3,
	0x9d, 0xfb, 0x50, 0x4b, 0x9e, 0x38, 0xe1, 0x72, 0x46, 0x59, 0x2d, 0x2a, 0x27, 0x9d, 0x61, 0x4f,
	0x95, 0x4a, 0xa8, 0x0e, 0x95, 0xa1, 0x6e, 0xc7, 0xa4, 0x80, 0x76, 0x61, 0xeb, 0x11, 0x2b, 0xd2,
	0xf2, 0x9d, 0x7f, 0x0a, 0xb0, 0xff, 0xba, 0x24, 0xa3, 0x6d, 0x28, 0xeb, 0x8f, 0xa5, 0x12, 0xda,
	0x01, 0x71, 0xa8, 0x3f, 0x96, 0x04, 0xb4, 0x0f, 0xd2, 0x68, 0x68, 0x8e, 0x0c, 0x43, 0xc7, 0x96,
	0xda, 0xb5, 0x8d, 0x8e, 0x75, 0x22, 0x95, 0x91, 0x04, 0x35, 0x6d, 0xf8, 0xa4, 0xd3, 0xd7, 0x62,
	0x8e, 0x88, 0x3e, 0x80, 0xef, 0x24, 0x1c, 0x45, 0x1f, 0x3e, 0xd2, 0x7a, 0x23, 0xdc, 0xb1, 0x34,
	0x7d, 0x28, 0x6d, 0xa1, 0x03, 0xd8, 0xcf, 0x42, 0x68, 0x43, 0x4b, 0xc5, 0x4f, 0x3a, 0x7d, 0xe9,
	0xd6, 0xe5, 0x7f, 0xd4, 0xa1, 0xa2, 0x77, 0xb5, 0x61, 0x4f, 0xda, 0x46, 0x1f, 0xc2, 0xfb, 0x09,
	0x9c, 0x39, 0x3a, 0x36, 0x15, 0xac, 0x19, 0x0c, 0xcd, 0xd6, 0xba, 0xd2, 0xce, 0x1d, 0x0d, 0x1a,
	0xf9, 0xd4, 0x32, 0xa7, 0x07, 0x7a, 0x77, 0xd4, 0x67, 0x4e, 0x4b, 0x50, 0xeb, 0x8c, 0x7a, 0x03,
	0x75, 0x68, 0x45, 0x06, 0x08, 0x2c, 0x0c, 0x5d, 0xf5, 0x89, 0x16, 0x91, 0x65, 0xf6, 0xf1, 0xf1,
	0x68, 0xd8, 0xed, 0xab, 0x92, 0xd8, 0xfe, 0x16, 0xa0, 0x31, 0xc5, 0x86, 0x12, 0x3d, 0xd2, 0xf5,
	0x05, 0x09, 0xd0, 0x0b, 0xa8, 0xf4, 0x08, 0x8d, 0x18, 0xa8, 0xd0, 0x95, 0x20, 0x37, 0x9f, 0x6a,
	0xb6, 0x37, 0x12, 0xe1, 0x65, 0x21, 0x97, 0xee, 0x09, 0x68, 0x01, 0xd5, 0x01, 0x09, 0xa6, 0x24,
	0xd6, 0xdc, 0x2a, 0x0e, 0xc3, 0xd5, 0xde, 0x2d, 0xfe, 0x7d, 0xac, 0x13, 0x3d, 0x87, 0x5a, 0x97,
	0xcc, 0x08, 0x7d, 0x87, 0x2a, 0x03, 0xa8, 0xc7, 0x13, 0x85, 0x77, 0xa7, 0x93, 0x42, 0x25, 0x1d,
	0xc3, 0x14, 0x4c, 0x68, 0x76, 0x68, 0x54, 0x30, 0xa1, 0xb9, 0x41, 0x8f, 0x5c, 0x62, 0xf7, 0xdc,
	0x7a, 0x6e, 0x84, 0x82, 0x1e, 0x16, 0x33, 0xfd, 0xd2, 0x38, 0xa7, 0xf9, 0xd3, 0x8d, 0xc5, 0x32,
	0xf9, 0x8d, 0xf8, 0x9b, 0xc5, 0x3a, 0x99, 0xb7, 0x14, 0x8d, 0x75, 0x3a, 0x5f, 0x91, 0x4b, 0xe8,
	0x6b, 0x01, 0xf6, 0x23, 0x6d, 0xf9, 0x41, 0x08, 0x2a, 0xe4, 0xc5, 0xab, 0x83, 0x96, 0xe6, 0xcf,
	0x36, 0x97, 0x4b, 0x6c, 0x59, 0xc0, 0x4e, 0x3c, 0x43, 0x45, 0x77, 0x0b, 0x1e, 0xa9, 0xc9, 0xe4,
	0xb6, 0x79, 0x6f, 0x03, 0x81, 0xd5, 0x16, 0xbe, 0x00, 0x58, 0xbd, 0x8c, 0x51, 0xb1, 0xba, 0xc9,
	0x0d, 0x2f, 0x9a, 0xf7, 0x37, 0x93, 0x59, 0xa9, 0xfe, 0x33, 0x1f, 0x18, 0xa7, 0xa7, 0x0d, 0x7a,
	0x50, 0xd0, 0x81, 0xdc, 0x29, 0xd7, 0x7c, 0xb8, 0xa9, 0x54, 0x6a, 0x40, 0xfb, 0x2b, 0x11, 0x76,
	0x59, 0x27, 0x55, 0x5f, 0x92, 0x31, 0xfa, 0x12, 0x6e, 0x67, 0xc6, 0x50, 0xf1, 0x2d, 0xa8, 0x50,
	0x12, 0x32, 0x43, 0xaf, 0xe6, 0x83, 0x0d, 0x04, 0xd2, 0x71, 0x17, 0x8f, 0xc6, 0x4a, 0xff, 0xa9,
	0xa9, 0x0f, 0xdf, 0x85, 0xfe, 0x74, 0xdc, 0x92, 0x14, 0xc2, 0x6a, 0x0a, 0x53, 0xac, 0x10, 0xf2,
	0x13, 0xa0, 0x62, 0x85, 0x70, 0x69, 0xd2, 0xc3, 0xf3, 0xf0, 0x8d, 0x08, 0x0d, 0x7d, 0x41, 0xbc,
	0x68, 0x17, 0xb2, 0x8c, 0xa0, 0xaf, 0x04, 0x40, 0xe9, 0xbd, 0x3f, 0x7d, 0xb0, 0xa2, 0x4d, 0xc6,
	0x25, 0xe9, 0x34, 0xa6, 0x58, 0x89, 0xbc, 0xf2, 0xd6, 0xe2, 0x51, 0xf9, 0xbb, 0x00, 0xfb, 0x23,
	0xef, 0x35, 0x96, 0x14, 0x6b, 0x71, 0xaf, 0xbc, 0x5f, 0x6e, 0x6c, 0x4b, 0x7c, 0xc6, 0x47, 0x17,
	0xe8, 0x62, 0xe9, 0xc9, 0x3f, 0x1a, 0x8a, 0xa5, 0xe7, 0xd2, 0x1d, 0x5d, 0x2e, 0x9d, 0x6f, 0xf3,
	0x2b, 0xdd, 0xfd, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x07, 0x68, 0x09, 0x09, 0x1b, 0x00,
	0x00,
}
